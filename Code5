  int top[2]; // вводим вершины

    for (;;) {

        cout << endl << endl << "Выберите 2 вершины: ";
        cin >> top[0];
        cin >> top[1];

        if (top[0] > top[1]) {
            int tmp = top[0];
            top[0] = top[1];
            top[1] = tmp;
        }

        if (top[0] == top[1] || !cin.good()) {
            cout << "Вы ввели неправильное значение" << endl;
            cin.clear();
            cin.ignore(10, '\n');
            continue;
        }

        break;
    }

    int anti_top[3]; // тут остаются не введеные ввершины

    for (int i = 0, j = 0; i != 5; i++, j++) {
        if (i != top[0] && i != top[1]) anti_top[j] = i;
        else j--;
    }

    int arr3[4][4]{ 0 }; // результат отождествления 


    for (int i = 0; i != 2; i++) {
        for (int j = 0, x = 0; j != 5; j++, x++) {
            // результат соединения двух вершин записывается в наименьший из двух вершин
            if (top[0] == j) continue;
            if (top[1] == j && j != 4) j++; // игнорируем 2 вершину т.к. она удаляется
            if (top[1] == 4 && j == 4) x--;

            if (arr1[top[i]][j]) {
                arr3[top[0]][x] = 1; // заполняем слияние двух вершин
                arr3[x][top[0]] = 1; // остальные вершины если пересекались хотя бы с одним из 2 сливаемых вершин
            }
        }
    }
    arr3[top[0]][top[0]] = 0;



    for (int i = 0; i != 3; i++) {

        for (int j = 0, y = 0; j != 3; j++, y++) {
            // цикл проходит по оставшимся вершинам 
            if (arr1[anti_top[i]][anti_top[j]]) {
                if (anti_top[j] > top[1] && anti_top[i] > top[1]) {
                    arr3[anti_top[i] - 1][anti_top[j] - 1] = 1;
                    arr3[anti_top[j] - 1][anti_top[i] - 1] = 1;
                }
                else if (anti_top[j] > top[1]) {
                    arr3[anti_top[i]][anti_top[j] - 1] = 1;
                    arr3[anti_top[j] - 1][anti_top[i]] = 1;
                }
                else if (anti_top[i] > top[1]) {
                    arr3[anti_top[i] - 1][anti_top[j]] = 1;
                    arr3[anti_top[j]][anti_top[i] - 1] = 1;
                }
                else {
                    arr3[anti_top[i]][anti_top[j]] = 1;
                    arr3[anti_top[j]][anti_top[i]] = 1;
                }
            }
        }
    }
    // выводим цикл на экран

    for (int i = 0; i != 4; i++) {
        Print1(arr3[i], 4);
    }

    cout << endl << endl;


    // отождествление вершин в списке смежности
    
    /// /// ///

    vector< vector<int> > arr_list3;
    arr_list3.resize(5);
    
    for (int i = 0; i != arr_list1.size(); i++) {  //копируем arr_list1s
        for (int j = 0; j != arr_list1[i].size(); j++) {
            arr_list3[i].push_back(arr_list1[i][j]);
        }
    }

    vector<int>::iterator itg = find(arr_list3[top[0]].begin(), arr_list3[top[0]].end(), top[1]); //связанна ли 1 вершина со 2-ой

    if (itg != arr_list3[top[0]].end()) {
        arr_list3[top[0]].erase(itg, itg+1);
    }     

    for (vector<int>::iterator i = arr_list3[top[1]].begin(); i != arr_list3[top[1]].end(); i++) {

        if (*i == top[0]) continue;

        itg = find(arr_list3[top[0]].begin(), arr_list3[top[0]].end(), *i);
        if (itg != arr_list3[top[0]].end() && *itg == *i) continue; // уже есть

        arr_list3[top[0]].push_back(*i);
    }

    sort(arr_list3[top[0]].begin(), arr_list3[top[0]].end()); // сортируем вершины по порядку

    for (int i = 0; i < sizeof(anti_top) / 4; i++) {

        itg = find(arr_list3[anti_top[i]].begin(), arr_list3[anti_top[i]].end(), top[1]);
        
        int c = count(arr_list3[anti_top[i]].begin(), arr_list3[anti_top[i]].end(), top[0]);

        if (itg != arr_list3[anti_top[i]].end()) { // соединен со 2-ой вершиной

            arr_list3[anti_top[i]].erase(itg);

            if (c == 0) { // не соединен с 1-ой вершиной

                arr_list3[anti_top[i]].push_back(top[0]);
                sort(arr_list3[anti_top[i]].begin(), arr_list3[anti_top[i]].end());
            }
        }
    }
    arr_list3.erase(arr_list3.begin() + top[1]); // удаляем 2 склеиваемую вершину


    for (int i = 0; i != arr_list3.size(); i++) {  //копируем arr_list1s
        for (int j = 0; j != arr_list3[i].size(); j++) {
            if (arr_list3[i][j] > top[1]) arr_list3[i][j]--;
        }
    }


    for (int i = 0; i != 4; i++) {
        cout << "Вершина " << i << "  ";
        for (int j = 0; j < arr_list3[i].size(); j++) {
            cout << arr_list3[i][j] << ' ';
        }
        cout << endl;
    }
    cout << endl << endl << endl << endl;



    // задание 2.2 стягивания  ребра

    int top2[2]; // вводим вершины

    for (;;) {

        cout << endl << endl << "Выберите 2 вершины: ";
        cin >> top2[0];
        cin >> top2[1];

        if (top2[0] > top2[1]) {
            int tmp = top2[0];
            top2[0] = top2[1];
            top2[1] = tmp;
        }

        if (top2[0] == top2[1] || !cin.good()) {
            cout << "Вы ввели неправильное значение" << endl;
            cin.clear();
            cin.ignore(10, '\n');
            continue;
        }

        if (!(arr1[top2[0]][top2[1]] && arr1[top2[1]][top2[0]])) {
            cout << "Данные вершины не образуют ребро" << endl;
            continue;
        }

        break;
    }


    int anti_top2[3]; // тут остаются не введеные ввершины

    for (int i = 0, j = 0; i != 5; i++, j++) {
        if (i != top2[0] && i != top2[1]) anti_top2[j] = i;
        else j--;
    }

    int arr4[4][4]{ 0 }; // результат отождествления 


    for (int i = 0; i != 2; i++) {
        for (int j = 0, x = 0; j != 5; j++, x++) {
            // результат соединения двух вершин записывается в наименьший из двух вершин
            if (top2[0] == j) continue;
            if (top2[1] == j && j != 4) j++; // игнорируем 2 вершину т.к. она удаляется
            if (top2[1] == 4 && j == 4) x--;

            if (arr1[top2[i]][j]) {
                arr4[top2[0]][x] = 1; // заполняем слияние двух вершин
                arr4[x][top2[0]] = 1; // остальные вершины если пересекались хотя бы с одним из 2 сливаемых вершин
            }
        }
    }
    arr4[top2[0]][top2[0]] = 0;



    for (int i = 0; i != 3; i++) {

        for (int j = 0, y = 0; j != 3; j++, y++) {
            // цикл проходит по оставшимся вершинам 
            if (arr1[anti_top2[i]][anti_top2[j]]) {
                if (anti_top2[j] > top2[1] && anti_top2[i] > top2[1]) {
                    arr4[anti_top2[i] - 1][anti_top2[j] - 1] = 1;
                    arr4[anti_top2[j] - 1][anti_top2[i] - 1] = 1;
                }
                else if (anti_top2[j] > top2[1]) {
                    arr4[anti_top2[i]][anti_top2[j] - 1] = 1;
                    arr4[anti_top2[j] - 1][anti_top2[i]] = 1;
                }
                else if (anti_top2[i] > top2[1]) {
                    arr4[anti_top2[i] - 1][anti_top2[j]] = 1;
                    arr4[anti_top2[j]][anti_top2[i] - 1] = 1;
                }
                else {
                    arr4[anti_top2[i]][anti_top2[j]] = 1;
                    arr4[anti_top2[j]][anti_top2[i]] = 1;
                }
            }
        }
    }

    cout << endl;
    for (int i = 0; i != 4; i++) {
        Print1(arr4[i], 4);
    }
    cout << endl;

    // стягивания ребра для списков смежности

    vector< vector<int> > arr_list4;
    arr_list4.resize(5);

    for (int i = 0; i != arr_list1.size(); i++) {
        for (int j = 0; j != arr_list1[i].size(); j++) {
            arr_list4[i].push_back(arr_list1[i][j]);
        }
    }

    itg = find(arr_list4[top2[0]].begin(), arr_list4[top2[0]].end(), top2[1]);

    if (itg != arr_list4[top2[0]].end()) {
        arr_list4[top2[0]].erase(itg, itg + 1);
    }

    for (vector<int>::iterator i = arr_list4[top2[1]].begin(); i != arr_list4[top2[1]].end(); i++) {

        if (*i == top[0]) continue;

        itg = find(arr_list4[top2[0]].begin(), arr_list4[top2[0]].end(), *i);
        if (itg != arr_list4[top2[0]].end() && *itg == *i) continue; // уже есть

        arr_list4[top2[0]].push_back(*i);
    }

    sort(arr_list4[top2[0]].begin(), arr_list4[top2[0]].end()); // сортируем вершины по порядку

    for (int i = 0; i < 3; i++) {

        itg = find(arr_list4[anti_top2[i]].begin(), arr_list4[anti_top2[i]].end(), top2[1]);

        int c = count(arr_list4[anti_top2[i]].begin(), arr_list4[anti_top2[i]].end(), top2[0]);

        if (itg != arr_list4[anti_top2[i]].end()) { // соединен со 2-ой вершиной

            arr_list4[anti_top2[i]].erase(itg);

            if (c == 0) { // не соединен с 1-ой вершиной

                arr_list4[anti_top2[i]].push_back(top2[0]);
                sort(arr_list4[anti_top2[i]].begin(), arr_list4[anti_top2[i]].end());
            }
        }
    }
    arr_list4.erase(arr_list4.begin() + top2[1]); // удаляем 2-ю склеиваемую вершину


    for (int i = 0; i != arr_list4.size(); i++) {  //копируем arr_list1s
        for (int j = 0; j != arr_list4[i].size(); j++) {
            if (arr_list4[i][j] > top[1]) arr_list4[i][j]--;
        }
    }


    for (int i = 0; i != 4; i++) {
        cout << "Вершина " << i << "  ";
        for (int j = 0; j < arr_list4[i].size(); j++) {
            cout << arr_list4[i][j] << ' ';
        }
        cout << endl;
    }
    cout << endl << endl;


    // задание 2.3 расщепления вершины 

    int arr5[6][6]{ 0 }; // новый массив с расщеплением

    int top3;

    for (;;) {

        cout << endl << endl << "Выберите 1 вершину: ";
        cin >> top3;

        if (top3 > 4 || top3 < 0 || !cin.good()) {
            cout << "Вы ввели неправильное значение" << endl;
            cin.clear();
            cin.ignore(10, '\n');
            continue;
        }

        break;
    }

    for (int i = 0; i != 5; i++) {
        for (int j = 0; j != 5; j++) {

            if (!i) {
                arr5[0][j + 1] = arr1[top3][j];
                arr5[j + 1][0] = arr1[top3][j];
            }

            if (arr1[i][j]) arr5[i + 1][j + 1] = 1;
        }
    }

    arr5[0][top3 + 1] = 1;
    arr5[top3 + 1][0] = 1;

    cout << endl;
    for (int i = 0; i != 6; i++) {
        Print1(arr5[i], 6);
    }
    cout << endl;

    // расщепления вершины смежные списки


    vector< vector<int> > arr_list5;
    arr_list5.resize(5);

    for (int i = 0; i != arr_list1.size(); i++) {
        for (int j = 0; j != arr_list1[i].size(); j++) {
            arr_list5[i].push_back(arr_list1[i][j]);
        }
    }

    vector<int> q;
    arr_list5.push_back(q);

    for (int i = 0; i != arr_list1[top3].size(); i++) {
        arr_list5[arr_list1.size()].push_back(arr_list1[top3][i]);
    }
    arr_list5[arr_list1.size()].push_back(top3);


    for (int i = 0; i != arr_list5[top3].size(); i++) {
        arr_list5[arr_list5[top3][i]].push_back(arr_list5.size() - 1);
    }
    arr_list5[top3].push_back(arr_list5.size() - 1);
    sort(arr_list5[arr_list1.size()].begin(), arr_list5[arr_list1.size()].end());

    for (int i = 0; i != 6; i++) {
        cout << "Вершина " << i << "  ";
        for (int j = 0; j < arr_list5[i].size(); j++) {
            cout << arr_list5[i][j] << ' ';
        }
        cout << endl;
    }
    cout << endl << endl;


    // задание 3.1 объединения графов

    int arr6[5][5]{ 0 };

    for (int i = 0; i != 5; i++) {
        for (int j = 0; j != 5; j++) {

            if (arr1[i][j] || arr2[i][j]) arr6[i][j] = 1;
        }
    }

    cout << endl << "Объединение графов" << endl << endl;
    for (int i = 0; i != 5; i++) {
        Print1(arr6[i], 5);
    }
    cout << endl;

    // задание 3.2 пересечения графов

    int arr7[5][5]{ 0 };

    for (int i = 0; i != 5; i++) {

        for (int j = i + 1; j != 5; j++) {

            if (arr1[i][j] && arr2[i][j]) {
                arr7[i][j] = 1;
                arr7[j][i] = 1;
            }
        }
    }

    cout << endl << "Пересечения графов" << endl << endl;
    for (int i = 0; i != 5; i++) {
        Print1(arr7[i], 5);
    }
    cout << endl;

    // задание 3.3 кольцевая сумма графов

    stack<int> Stack1;
    stack<int> Stack2;
    Stack1.push(0);
    Stack2.push(0);

    int nodes1[5]{ 0 }; // состояние вершин
    int nodes2[5]{ 0 }; // состояние вершин

    while (!Stack1.empty() && !Stack2.empty()) {

        int node1 = Stack1.top();
        int node2 = Stack2.top();
        Stack1.pop();
        Stack2.pop();

        if (nodes1[node1] == 2 && nodes2[node2]) continue; // уже были

        nodes1[node1] = 2;
        nodes2[node2] = 2;

        for (int i = 0; i != 5; i++) {

            if (arr1[node1][i] && nodes1[i] != 2) {

                Stack1.push(i);

                nodes1[i] = 1;
            }

            if (arr2[node2][i] && nodes2[i] != 2) {

                Stack2.push(i);
                nodes2[i] = 1;
            }
        }
    }

    int n = 0;
    for (int i = 0; i != 5; i++) {
        if (!nodes1[i] || !nodes2[i]) {
            n++;
        }
    }

    if (n > 0) {
        printf("Один из графов имеет изолированн%s вершин%c \n", n == 1 ? "ую" : "ые", n == 1 ? 'у' : 'ы');
        cout << "Конец программы" << endl;
        return 0;
    }

    int arr8[5][5]{ 0 };

    for (int i = 0; i != 5; i++) {

        for (int j = i + 1; j != 5; j++) {

            if (arr1[i][j] != arr2[i][j]) {
                arr8[i][j] = 1;
                arr8[j][i] = 1;
            }
        }
    }

    cout << endl << "Кольцевая сумма графов" << endl << endl;
    for (int i = 0; i != 5; i++) {
        Print1(arr8[i], 5);
    }
    cout << endl;

    return 0;
}
